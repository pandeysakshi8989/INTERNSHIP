Certainly! I will refactor the code into multiple modules and create a `main.py` that will serve as the entry point to run the entire system. We'll organize the code into the following modules:

### Project Structure:
```
expense_tracker/
│
├── main.py               # Entry point for the application
├── db_operations.py      # Database-related functions
├── user_operations.py    # User registration, login, and dashboard functionality
├── expense_operations.py # Functions for adding, updating, deleting, and viewing expenses
├── graph_operations.py   # Functions for generating expense graphs
└── gui.py                # GUI-related functions
```

### Module Breakdown:

1. **db_operations.py**: Handles database connections and queries related to users and expenses.
2. **user_operations.py**: Contains user-related operations like registration, login, and dashboard logic.
3. **expense_operations.py**: Manages operations like adding, updating, deleting, and retrieving expenses.
4. **graph_operations.py**: Responsible for generating graphs based on user expenses.
5. **gui.py**: Contains all the Tkinter GUI code to interact with the user.

### Code Implementation

#### 1. `db_operations.py`

```python
import sqlite3

def connect_db():
    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()
    return conn, cursor

def create_tables():
    conn, cursor = connect_db()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        email TEXT UNIQUE,
                        username TEXT,
                        password TEXT)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS expenses (
                        id INTEGER PRIMARY KEY,
                        user_id INTEGER,
                        date TEXT,
                        category TEXT,
                        amount REAL,
                        mode_of_payment TEXT,
                        FOREIGN KEY (user_id) REFERENCES users(id))''')
    conn.commit()
    conn.close()

def add_admin():
    conn, cursor = connect_db()
    cursor.execute('''INSERT OR IGNORE INTO users (email, username, password)
                        VALUES ('admin123@gmail.com', 'admin', 'ad123')''')
    conn.commit()
    conn.close()

def get_user_by_email_and_password(email, password):
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM users WHERE email = ? AND password = ?', (email, password))
    user = cursor.fetchone()
    conn.close()
    return user

def register_user(email, username, password):
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM users WHERE email = ?', (email,))
    user = cursor.fetchone()
    if user:
        conn.close()
        return False
    cursor.execute('INSERT INTO users (email, username, password) VALUES (?, ?, ?)', (email, username, password))
    conn.commit()
    conn.close()
    return True

def get_expenses_by_user_id(user_id):
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM expenses WHERE user_id = ?', (user_id,))
    expenses = cursor.fetchall()
    conn.close()
    return expenses

def add_expense(user_id, date, category, amount, mode_of_payment):
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO expenses (user_id, date, category, amount, mode_of_payment) VALUES (?, ?, ?, ?, ?)',
                   (user_id, date, category, amount, mode_of_payment))
    conn.commit()
    conn.close()
```

#### 2. `user_operations.py`

```python
import tkinter as tk
from tkinter import messagebox
from db_operations import register_user, get_user_by_email_and_password, add_admin, create_tables

def register_user_action(email, username, password, confirm_password):
    if password != confirm_password:
        messagebox.showerror("Error", "Passwords do not match!")
        return False
    if register_user(email, username, password):
        messagebox.showinfo("Success", "Registration successful! Please login.")
        return True
    else:
        messagebox.showerror("Error", "Email already exists. Please login.")
        return False

def authenticate_user_action(email, password):
    user = get_user_by_email_and_password(email, password)
    return user
```

#### 3. `expense_operations.py`

```python
from db_operations import add_expense, get_expenses_by_user_id

def add_expense_action(user_id, date, category, amount, mode_of_payment):
    add_expense(user_id, date, category, amount, mode_of_payment)

def get_user_expenses(user_id):
    return get_expenses_by_user_id(user_id)
```

#### 4. `graph_operations.py`

```python
import pandas as pd
import matplotlib.pyplot as plt
from db_operations import get_expenses_by_user_id

def generate_expense_graph(user_id):
    expenses = get_expenses_by_user_id(user_id)
    df = pd.DataFrame(expenses, columns=['ID', 'User_ID', 'Date', 'Category', 'Amount', 'Mode_of_Payment'])
    df['Date'] = pd.to_datetime(df['Date'])
    
    # Monthly expenses graph
    monthly_expenses = df.groupby(df['Date'].dt.to_period('M'))['Amount'].sum()
    fig, ax = plt.subplots(figsize=(5, 5))
    monthly_expenses.plot(kind='bar', ax=ax)
    ax.set_title('Monthly Expenses')
    ax.set_ylabel('Amount')
    
    # Category-wise expenses graph
    category_expenses = df.groupby('Category')['Amount'].sum()
    fig2, ax2 = plt.subplots(figsize=(5, 5))
    category_expenses.plot(kind='pie', ax=ax2, autopct='%1.1f%%')
    ax2.set_title('Category-wise Expenses')

    return fig, fig2
```

#### 5. `gui.py`

```python
import tkinter as tk
from tkinter import messagebox
from user_operations import register_user_action, authenticate_user_action
from expense_operations import add_expense_action, get_user_expenses
from graph_operations import generate_expense_graph
from db_operations import add_admin, create_tables

def login_ui():
    root = tk.Tk()
    root.title("Expense Tracker - Login")
    
    tk.Label(root, text="Email").grid(row=0, column=0)
    tk.Label(root, text="Password").grid(row=1, column=0)
    
    email_entry = tk.Entry(root)
    password_entry = tk.Entry(root, show="*")
    
    email_entry.grid(row=0, column=1)
    password_entry.grid(row=1, column=1)
    
    def login_action():
        email = email_entry.get()
        password = password_entry.get()
        user = authenticate_user_action(email, password)
        if user:
            if email == 'admin123@gmail.com':
                admin_dashboard()
            else:
                user_dashboard(user[0], user[1])  # user[0] = user_id, user[1] = username
        else:
            messagebox.showerror("Error", "Invalid credentials")
    
    tk.Button(root, text="Login", command=login_action).grid(row=2, column=0, columnspan=2)
    tk.Button(root, text="Register", command=register_ui).grid(row=3, column=0, columnspan=2)
    
    root.mainloop()

def register_ui():
    root = tk.Tk()
    root.title("Expense Tracker - Register")
    
    tk.Label(root, text="Email").grid(row=0, column=0)
    tk.Label(root, text="Username").grid(row=1, column=0)
    tk.Label(root, text="Password").grid(row=2, column=0)
    tk.Label(root, text="Confirm Password").grid(row=3, column=0)
    
    email_entry = tk.Entry(root)
    username_entry = tk.Entry(root)
    password_entry = tk.Entry(root, show="*")
    confirm_password_entry = tk.Entry(root, show="*")
    
    email_entry.grid(row=0, column=1)
    username_entry.grid(row=1, column=1)
    password_entry.grid(row=2, column=1)
    confirm_password_entry.grid(row=3, column=1)
    
    def register_action():
        email = email_entry.get()
        username = username_entry.get()
        password = password_entry.get()
        confirm_password = confirm_password_entry.get()
        
        if register_user_action(email, username, password, confirm_password):
            root.destroy()
            login_ui()

    tk.Button(root, text="Register", command=register_action).grid(row=4, column=0, columnspan=2)
    
    root.mainloop()

def user_dashboard(user_id, username):
    root = tk.Tk()
    root.title(f"Welcome {username} - Expense Tracker")

    tk.Label(root, text=f"Hello, {username}").grid(row=0, column=0)

    # Expense form
    tk.Label(root, text="Date").grid(row=1, column=0)
    tk.Label(root, text="Category").grid(row=2, column=0)
    tk.Label(root, text="Amount").grid(row=3, column=0)
    tk.Label(root, text="Mode of Payment").grid(row=4, column=0)
    
    date_entry = tk.Entry(root)
    category_entry = tk.Entry(root)
    amount_entry = tk.Entry(root)
    mode_of_payment_entry = tk.Entry(root)
    
    date_entry.grid(row=1, column=1)
    category_entry.grid(row=2, column=1)
    amount_entry.grid(row=3, column=1)
    mode_of_payment_entry.grid(row=4, column=1)
    
    def add_expense_action():
        date = date_entry.get()
        category = category_entry.get()
        amount = float(amount_entry.get())
        mode_of_payment = mode_of_payment_entry.get()
        add_expense_action(user_id, date, category, amount, mode_of_payment)
        messagebox.showinfo("Success", "Expense added successfully!")

    tk.Button(root, text="Add Expense", command=add_expense_action).grid(row=5, column=0)

    root.mainloop()

def admin_dashboard():
    root = tk.Tk()
    root.title("Admin Dashboard - Expense Tracker")

    tk.Label(root, text="Admin Dashboard").grid(row=0, column=0)
    
    # Code for admin-specific actions
    
    root.mainloop()
```

#### 6. `main.py`

```python
from db_operations import create_tables, add_admin
from gui import login_ui

def main():
    create_tables()
    add_admin()  # Add admin user if it doesn't exist
    login_ui()  # Start the application with the login UI

if __name__ == "__main__":
    main()
```

### Running the System:
1. Make sure all the modules are in the same directory.
2. To run the system, simply run the `main.py` file.

```bash
python main.py
```

### Explanation of the Code:

1. **Modularization**: 
   - Each piece of functionality is separated into its respective module (database operations, user operations, expense operations, and GUI).
   - The `main.py` file connects all modules together and runs the application.

2. **Database**:
   - The database handles user and expense data using SQLite.

3. **User and Expense Operations**:
   - Functions for user registration, login, adding expenses, and fetching expenses are implemented in separate files for easy maintenance.

4. **Graphing**:
   - Graphs are generated using `Matplotlib` based on user expenses.

5. **GUI**:
   - The `Tkinter` library is used to build the user interface and provide interactions like login, registration, adding expenses, and viewing graphs.

This structure keeps the code modular, organized, and easy to maintain.