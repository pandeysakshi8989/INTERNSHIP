# -*- coding: utf-8 -*-
"""TFIDNLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kf0tKccqEZTLNqij0P11mIdElcVOq3fA
"""

import pandas as pd
from nltk.stem.porter import PorterStemmer

import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')

df = pd.read_csv('/content/Restaurant_Reviews 1.tsv', delimiter = '\t', quoting =3)

df.head()

df.shape

import re

corpus = []
for i in range(0,1000):
  review = re.sub(pattern = '[^a-zA-Z]', repl =' ', string =df['Review'][i])
  review= review.lower()
  review_word = review.split()
  review_word = [word for word in review_word if not word in set(stopwords.words('english'))]
  ps = PorterStemmer()
  review1 = [ps.stem(word) for word in review_word]
  #Join the stemmed words back into a single string
  review = ' '.join(review1)
  corpus.append(review)

from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(corpus)

tfid_df = pd.DataFrame(X.todense(), columns=vectorizer.get_feature_names_out())
print(tfid_df.tail(30))

ps = PorterStemmer()
words =["eat","eating","read","reading","congratulations","eaten"]
for word in words:
  print(ps.stem(word))

from nltk.stem import WordNetLemmatizer

import nltk
nltk.download('wordnet')
lemma = WordNetLemmatizer()
words =["eat","eating","read","reading","congratulations","eaten"]
for word in words:
  print(lemma.lemmatize(word))

import numpy as np
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
data_standarized = scaler.fit_transform(tfid_df)

pca = PCA(n_components=2)
principal_components = pca.fit_transform(data_standarized)

principal_df = pd.DataFrame(data = principal_components, columns = ['principal component 1', 'principal component 2'])
print(principal_df.head())

import matplotlib.pyplot as plt
plt.figure(figsize=(8, 6))
plt.scatter(principal_df['principal component 1'], principal_df['principal component 2'])
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA of Restaurant Reviews')
plt.show()

plt.figure(figsize=(10, 6))
plt.plot(principal_df['principal component 1'], principal_df['principal component 2'])
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA of Restaurant Reviews')
plt.grid(True)
plt.show()